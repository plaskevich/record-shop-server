type Query {
  getRecord(id: String!): Record
  getAllRecords: [Record]
  getStockRecords: [Record]
  getSoldRecords: [Record]
  getShop(id: String!): Shop
  getGenreStatistics: [GenreStatistic]
}

type Mutation {
  signUp(data: UserInput!): AuthData
  signIn(data: LoginInput): AuthData
  addShop(name: String!): Shop
  addRecord(data: RecordInput!): Record
  editRecord(id: String!, data: RecordInput!): Record
  setInStock(id: String!): Record
  setSold(id: String!): Record
  removeRecord(id: String!): Record
  addUserToShop(shopId: String!, userId: String!, role: String!): Shop
  changeUserRole(shopId: String!, userId: String!, role: String!): Shop
}

input LoginInput {
  email: String
  password: String
}

input UserInput {
  email: String
  password: String
  name: String
}

input RecordInput {
  artist: String
  title: String
  status: Status
  label: String
  condition: String
  genre: String
  price: String
  year: Int
  notes: String
  img_uri: String
}

type AuthData {
  token: String
  user: User
}

type User {
  id: String
  email: String
  name: String
  shop: String
}

type Shop {
  id: String
  name: String
  users: [ShopUser]
}

type Record {
  id: String
  artist: String
  title: String
  label: String
  status: String
  condition: String
  genre: String
  date_added: String
  price: String
  year: Int
  notes: String
  img_uri: String
}

type ShopUser {
  userId: String
  role: UserRole
}

type GenreStatistic {
  genre: String
  records: [String]
  percent: Int
}

enum Status {
  sold
  inStock
}

enum UserRole {
  admin
  regular
}
